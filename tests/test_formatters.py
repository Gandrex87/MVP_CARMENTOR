# tests/test_formatters.py

import pytest
# Ajusta rutas de importaci√≥n
from utils.formatters import formatear_preferencias_en_tabla
from graph.perfil.state import PerfilUsuario, FiltrosInferidos, EconomiaUsuario
from utils.enums import Transmision, NivelAventura, TipoMecanica # Importa Enums

# ---- Pruebas para formatear_preferencias_en_tabla ----

# --- Caso 1: Solo Preferencias B√°sicas ---
def test_formatear_tabla_solo_prefs_basicas():
    prefs = PerfilUsuario(
        solo_electricos="no",
        uso_profesional="no",
        altura_mayor_190="no",
        peso_mayor_100="no",
        valora_estetica="s√≠",
        transmision_preferida=Transmision.AUTOMATICO,
        apasionado_motor="no",
        aventura=NivelAventura.ninguna
    )
    resultado = formatear_preferencias_en_tabla(preferencias=prefs)
    
    print(f"\nResultado Tabla (Prefs B√°sicas):\n{resultado}") # Imprimir para depuraci√≥n visual

    # Verificar cabecera y algunas filas clave de preferencias
    assert "‚úÖ He entendido lo siguiente sobre tus preferencias:" in resultado
    assert "| Preferencia             | Valor                      |" in resultado
    assert "| Tipo de coche           | No necesariamente el√©ctrico |" in resultado # is_yes(no) -> False
    assert "| Uso                     | Particular |" in resultado # is_yes(no) -> False
    assert "| Est√©tica                | Importante |" in resultado # is_yes(s√≠) -> True
    assert "| Transmisi√≥n preferida   | Autom√°tico |" in resultado # Enum.value.capitalize()
    assert "| Apasionado del motor    | No |" in resultado # is_yes(no) -> False
    assert "| Aventura                | Ninguna |" in resultado # Enum.value.capitalize()
    # Verificar que NO aparezcan las secciones de filtros y econom√≠a
    assert "üéØ Filtros t√©cnicos inferidos:" not in resultado
    assert "üí∞ Econom√≠a del usuario:" not in resultado
    assert "Espero que este resumen te sea √∫til." in resultado # Verificar mensaje final

# --- Caso 2: Preferencias y Filtros (con listas) ---
def test_formatear_tabla_con_filtros():
    prefs = PerfilUsuario(solo_electricos="s√≠", valora_estetica="no", apasionado_motor="s√≠") # Otros None
    filtros = FiltrosInferidos(
        tipo_mecanica=[TipoMecanica.BEV], # Lista con un Enum
        estetica_min=1.0,
        premium_min=5.0,
        singular_min=5.0,
        tipo_carroceria=["SUV", "COUPE"] # Lista de strings (como vendr√≠a de RAG quiz√°s)
    )
    resultado = formatear_preferencias_en_tabla(preferencias=prefs, filtros=filtros)
    
    print(f"\nResultado Tabla (Prefs+Filtros):\n{resultado}")

    # Verificar secci√≥n preferencias
    assert "| Tipo de coche           | El√©ctrico |" in resultado # is_yes(s√≠) -> True
    assert "| Est√©tica                | No prioritaria |" in resultado # is_yes(no) -> False
    assert "| Apasionado del motor    | S√≠ |" in resultado # is_yes(s√≠) -> True
    # Verificar secci√≥n filtros
    assert "üéØ Filtros t√©cnicos inferidos:" in resultado
    assert "| Filtro t√©cnico        | Valor                            |" in resultado
    assert "| Tipo de mec√°nica     | BEV |" in resultado # Lista de enums formateada
    assert "| Tipo de carrocer√≠a   | SUV, COUPE |" in resultado # Lista de strings formateada
    assert "| Est√©tica m√≠nima      | 1.0 |" in resultado
    assert "| Premium m√≠nima       | 5.0 |" in resultado
    # Verificar ausencia de econom√≠a
    assert "üí∞ Econom√≠a del usuario:" not in resultado

# --- Caso 3: Todo Incluido - Econom√≠a Modo 1 ---
def test_formatear_tabla_completa_econ_modo1():
    prefs = PerfilUsuario(solo_electricos="no", uso_profesional="s√≠", aventura=NivelAventura.ocasional)
    filtros = FiltrosInferidos(tipo_mecanica=[TipoMecanica.HEVG], tipo_carroceria=["MONOVOLUMEN"])
    economia = EconomiaUsuario(modo=1, ingresos=60000.50, ahorro=15000) # Modo 1 completo
    
    resultado = formatear_preferencias_en_tabla(preferencias=prefs, filtros=filtros, economia=economia)
    print(f"\nResultado Tabla (Completa Econ 1):\n{resultado}")

    assert "‚úÖ He entendido lo siguiente" in resultado
    assert "| Uso                     | Uso profesional |" in resultado
    assert "| Aventura                | Ocasional |" in resultado
    assert "üéØ Filtros t√©cnicos inferidos" in resultado
    assert "| Tipo de mec√°nica     | HEVG |" in resultado
    assert "| Tipo de carrocer√≠a   | MONOVOLUMEN |" in resultado
    # Verificar secci√≥n econom√≠a MODO 1
    assert "üí∞ Econom√≠a del usuario:" in resultado
    assert "| Modo               | Asesor Financiero |" in resultado
    assert "| Ingresos anuales   | 60.000 ‚Ç¨ |" in resultado # Formato n√∫mero
    assert "| Ahorro disponible  | 15.000 ‚Ç¨ |" in resultado # Formato n√∫mero
    assert "Cuota m√°xima" not in resultado # No debe aparecer cuota
    assert "Presupuesto Contado" not in resultado # No debe aparecer pago contado

# --- Caso 4: Todo Incluido - Econom√≠a Modo 2 Submodo 2 ---
def test_formatear_tabla_completa_econ_modo2_sub2():
    prefs = PerfilUsuario(solo_electricos="no")
    filtros = FiltrosInferidos(tipo_mecanica=[TipoMecanica.GASOLINA])
    # Modo 2, submodo 2 completo con entrada
    economia = EconomiaUsuario(modo=2, submodo=2, cuota_max=350.99, entrada=5000) 
    
    resultado = formatear_preferencias_en_tabla(preferencias=prefs, filtros=filtros, economia=economia)
    print(f"\nResultado Tabla (Completa Econ 2/2):\n{resultado}")

    assert "‚úÖ He entendido lo siguiente" in resultado
    assert "üéØ Filtros t√©cnicos inferidos" in resultado
    # Verificar secci√≥n econom√≠a MODO 2 / SUBMODO 2
    assert "üí∞ Econom√≠a del usuario:" in resultado
    assert "| Modo               | Presupuesto Definido |" in resultado
    assert "| Tipo de Pago       | Cuotas Mensuales |" in resultado
    assert "| Cuota m√°xima       | 351 ‚Ç¨/mes |" in resultado # Formato n√∫mero redondeado y texto
    assert "| Entrada inicial    | 5.000 ‚Ç¨ |" in resultado # Formato n√∫mero
    assert "Ingresos anuales" not in resultado # No debe aparecer ingresos
    assert "Ahorro disponible" not in resultado # No debe aparecer ahorro
    assert "Presupuesto Contado" not in resultado # No debe aparecer pago contado

# --- Caso 5: Econom√≠a Modo 2 Submodo 1 ---
def test_formatear_tabla_completa_econ_modo2_sub1():
    prefs = PerfilUsuario(solo_electricos="no")
    filtros = FiltrosInferidos(tipo_mecanica=[TipoMecanica.GASOLINA])
    # Modo 2, submodo 1 completo
    economia = EconomiaUsuario(modo=2, submodo=1, pago_contado=22000) 
    
    resultado = formatear_preferencias_en_tabla(preferencias=prefs, filtros=filtros, economia=economia)
    print(f"\nResultado Tabla (Completa Econ 2/1):\n{resultado}")

    assert "üí∞ Econom√≠a del usuario:" in resultado
    assert "| Modo               | Presupuesto Definido |" in resultado
    assert "| Tipo de Pago       | Pago Contado |" in resultado
    assert "| Presupuesto Contado| 22.000 ‚Ç¨ |" in resultado # Formato n√∫mero
    assert "Cuota m√°xima" not in resultado # No debe aparecer cuota
    assert "Entrada inicial" not in resultado # No debe aparecer entrada